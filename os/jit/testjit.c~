#include <stdio.h>
#include <string.h>
#include <sys/mman.h>

#define SIZE 4096

void* alloc_writable_memory(size_t size)
{
    void* ptr = mmap(0, size,
            PROT_READ | PROT_WRITE,
            MAP_PRIVATE | MAP_ANONYMOUS, -1, 0);
    if (ptr == MAP_FAILED)
    {
        perror("mmap");
        return NULL;
    }
    return ptr;
}

int free_memory(void* ptr, size_t size)
{
    if (munmap(ptr, size) == -1)
    {
        perror("munmap");
        return -1;
    }
    return 0;
}

int make_memory_executable(void* ptr, size_t size)
{
    if (mprotect(ptr, size, PROT_READ | PROT_EXEC) == -1)
    {
        perror("mprotect");
        return -1;
    }
    return 0;
}

int main(int argc, char* argv[])
{
    void* memory = alloc_writable_memory(SIZE);
    unsigned char code[] =
    {
        0x5e,                                     //pop %rsi
        0x48, 0x83, 0xc6, 0x1d,                   //add $0x1d, %rsi
        0x48, 0xc7, 0xc7, 0x01, 0x00, 0x00, 0x00, //mov $0x01, %rdi
        0x48, 0xc7, 0xc0, 0x01, 0x00, 0x00, 0x00, //mov $0x01, %rax
        0x48, 0xc7, 0xc2, 0x0e, 0x00, 0x00, 0x00, //mov $0x0e, %rdx
        0x0f, 0x05,                               //syscall
        0xc3,                                     //ret
        0x48, 0x65, 0x6c, 0x6c, 0x6f,             //Hello
        0x2c,                                     //,
        0x20,                                     //\s
        0x77, 0x6f, 0x72, 0x6c, 0x64,             //world
        0x21,                                     //!
        0x0a                                      //\n
    };
    if (argc > 1)
    {
        code[sizeof(code) - 2] = argv[1][0];
    }
    memcpy(memory, code, sizeof(code));
    make_memory_executable(memory, SIZE);
    void (*func)();
    func = memory;
    func();
    free_memory(memory, SIZE);
    return 0;
}
